'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/javascript/learn_typescript/','title':"Apprendre le Typescript",'content':"Apprendre le Typescript Auteur(s): Erwan ROUSSEL\n TypeScript est un langage de programmation libre et open source développé par Microsoft qui a pour but d\u0026rsquo;améliorer et de sécuriser la production de code JavaScript. C\u0026rsquo;est un sur-ensemble de JavaScript.\n Wikipédia\nInstaller Typescript Pour installer typescript vous devez avoir télécharger et installer nodejs afin d\u0026rsquo;utiliser son gestionnaire de paquets npm.\nRendez-vous dans le terminal de votre choix et taper la commande suivante :\nnpm install -g typescript ou bien via yarn :\nyarn add global typescript -g signifie que typescript va être installé sur tout votre ordinateur.\nPour éviter les erreurs et être sûr d\u0026rsquo;avoir la même version il est recommandé de ne pas l\u0026rsquo;installer globalement mais de l\u0026rsquo;ajouter aux dépendances du projet :\nnpm init npm install --save-dev typescript npm init va initialiser votre projet avec un fichier package.json npm install \u0026ndash;save-dev va ajouter typescript aux dépendances de développement\nou bien via yarn :\nyarn init yarn add -D typescript yarn init va initialiser le projet avec un package.json yarn add -D typescript va ajouter typescript aux dépendances de développement\nVous pouvez aussi installer l\u0026rsquo;extension TYPESCRIPT sur votre éditeur de texte préféré\nVous pouvez maintenant compiler votre code grace à la commande suivante :\n(si vous avez installé typescript globalement)\ntsc lenomduscript.ts Sinon :\nnpx tsc lenomduscript.ts Utiliser Typescript   Le typage   La surcouche Typescript apporte le support de types tel que :\n Boolean :  let happy: boolean = false;  String :  let salut: string = \u0026#34;Hello World\u0026#34;;  Number :  let nombre: number = 1;  Array :  let liste: number[] = [1, 2, 3]; Cependant vous pouvez aussi l\u0026rsquo;écrire de cette manière :\nlet liste: Array\u0026lt;number\u0026gt; = [1, 2, 3]; Avec : Array\u0026lt;TypeDeLElement\u0026gt;\n Tuple :  let x: [string, number]; x = [\u0026#34;hello\u0026#34;, 10]; Ainsi si vous inversez \u0026quot;hello\u0026quot; et 10 vous obtiendrez une erreur puisqu\u0026rsquo;ils ne correspondront plus aux types définis.\nSi vous attribuer une valeur qui ne correspond pas au type tel que :\nlet nombre: number = \u0026#34;Salut\u0026#34;; Lors de la compilation, vous aurez l\u0026rsquo;erreur suivante :\nerror TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\nIl existe d\u0026rsquo;autres types tels que Any, Void ou Enum qui sont décrits dans la documentation de Typecsript\n  Les Interfaces   interface Utilisateur{ nom: string; age: number; } On crée alors une interface avec plusieurs types.\nlet utilisateur: Utilisateur = { nom: \u0026#39;Gérard\u0026#39;, age: 23 } Et on l\u0026rsquo;utilise comme les autres types.\nVoir plus ici\n  Les Classes   Typescript apporte le support des classes.\nclass Personnage{ public nom: string; public vie: number; letructor(nom: string, vie: number, pouvoirs: string[]){ this.nom = nom; this.vie = vie; } } L\u0026rsquo;héritage aussi.\nclass Sorcier extends Personnage{ // La classe } Voir plus ici\nImport (es6) Typescript apporte aussi la fonctionnalité d\u0026rsquo;importer des modules à la manière des imporrt es6, sur nodeJS :\nconst express = require(\u0026#39;express\u0026#39;) De cette manière :\nimport * as express from \u0026#39;express\u0026#39;; Remplacer express par le module souhaité.\nOu bien :\nimport bodyParser from \u0026#34;body-parser\u0026#34;; Pour importer un seul élèment.\nOn peut aussi importer seulement les élèments souhaités (à l\u0026rsquo;aide du destructuring):\nimport { get, post } from \u0026#34;axios\u0026#34;; Pour aller plus loin Utiliser tsconfig\nUtiliser Typescript et NodeJS (Grafikart)\nJ\u0026rsquo;ai fait le tour des principes de bases de Typescript, vous pouvez maintenant lire la documentation complète.\n"});index.add({'id':1,'href':'/docs/git/learn_git/','title':"Apprendre à utiliser Git",'content':"Apprendre à utiliser Git Auteur(s) : Erwan ROUSSEL\nInspiré de ce tutoriel\nInstallation  Télécharger git pour Mac OS Télécharger git pour Windows Télécharger git pour Linux  Configuration Ceci vous sera demandé lorsque vous allez essayer d\u0026rsquo;envoyer vos modifications\nIl est requis d\u0026rsquo;avoir configuré son nom d\u0026rsquo;utilisateur et son addresse email en exécutant ces commandes :\n git config --global user.name \u0026quot;John Doe\u0026quot; : configure le nom d\u0026rsquo;utilisateur en tant que John Doe git config --global user.email johndoe@example.com : configure l\u0026rsquo;addresse email en tant que johndoe@example.com  Créer un nouveau dépôt Un dépôt (\u0026ldquo;repository\u0026rdquo; en anglais) Git est un entrepôt virtuel de votre projet. Il vous permet d\u0026rsquo;enregistrer votre code et ses versions ainsi que d\u0026rsquo;y accéder au besoin. Source\nPour initialiser un dépot Git :\n Créez un nouveau dossier, ouvrez le Exécutez la commande git init  Un dossier .git devrait apparaître dans celui-ci, ceci signifie que le dépôt a bien été initialisé (c’est un dossier caché situé à la racine du projet). Il contient l’historique des modifications des fichiers et la configuration de Git pour ce projet). Source\nCloner un dépôt Si votre dépôt se situe déjà sur un serveur distant (comme Github, Gitlab, Bitbucket ou autre), il vous faudra le \u0026ldquo;cloner\u0026rdquo; (le télécharger) afin d\u0026rsquo;y accéder sur votre ordinateur.\nIl y a deux méthodes pour faire ceci:\n  Par défaut, en utilisant HTTP : git clone https://nom-du-serveur.com/nom-d-utilisateur/nom-du-depot\n  Autrement (si ssh est configuré) : git clone git@serveur:/nom-d-utilisateur/nom-du-depot\n  Arbres Un arbre (tree) Git est une forme de répertoire. Il va référencer une liste de trees et de blobs (sous-répertoires et fichiers) Source\nVotre dépôt local est composé de trois \u0026ldquo;arbres\u0026rdquo; gérés par git.\n Le premier est votre espace de travail qui contient réellement vos fichiers. Le second est un Index qui joue un rôle d\u0026rsquo;espace de transit pour vos fichiers Et enfin HEAD qui pointe vers la dernière validation que vous ayez faite.  Ajouter et valider Vous pouvez proposer un changement (ajouter des fichiers à l\u0026rsquo;Index) en exécutant les commandes suivantes :\n git add nom-du-fichier ou git add * : c\u0026rsquo;est la première étape dans un workflow git basique. git commit -m \u0026quot;Message de validation\u0026quot; : valide ces changement.  En remplaçant nom-du-fichier par le nom du fichier a ajouter.\nLe fichier est donc ajouté au HEAD, mais pas encore dans votre dépôt distant.\nLes branches Les branches sont utilisées pour développer des fonctionnalités isolées des autres. La branche master est la branche par défaut quand vous créez un dépôt. Utilisez les autres branches pour le développement et fusionnez ensuite à la branche principale quand vous avez fini. Source\nFeature (en anglais) signifie fonctionnalité\nLes commandes suivantes vous permettent de manipuler les branches :\n Créer une nouvelle branche nommée \u0026ldquo;feature_x\u0026rdquo; et passer dessus pour l\u0026rsquo;utiliser : git checkout -b feature_x Retourner sur la branche principale : git checkout master Supprimer la branche : git branch -d feature_x  À savoir : une branche n\u0026rsquo;est pas disponible pour les autres tant que vous ne l\u0026rsquo;aurez pas envoyée vers votre dépôt distant\n Pour l\u0026rsquo;envoyer vers votre dépôt distant : git push origin \u0026lt;branch\u0026gt;  Fusion Pour fusionner les changements entre deux branches il existe la commande :\n git merge branche : qui va fusionner la branche indiquée avec la branche active (par exemple master)  En remplaçant branche par la branche que vous souhaitez fusionner avec la branche active\nEnvoyer des changements Vos changements sont maintenant dans le HEAD de la copie de votre dépôt local. Pour les envoyer à votre dépôt distant :\n Exécutez la commande git push origin master  En remplaçant master par la branche dans laquelle vous souhaitez envoyer vos changements.\nSi vous n\u0026rsquo;avez pas cloné votre dépôt existant et voulez le connecter à votre dépôt sur un serveur distant (après l\u0026rsquo;avoir créé au préalable) :\n Ajoutez le avec : git remote add origin addresse-du-depot  En remplaçant addresse du dépôt par l\u0026rsquo;addresse de votre dépôt\nMaintenant, vous pouvez envoyer vos changements vers le serveur distant sélectionné en éxécutant la commande précédante\nMettre à jour pour mettre à jour votre dépôt local vers les dernières validations, exécutez la commande git pull dans votre espace de travail pour récupérer et fusionner les changements distants. Lors de la mise à jour, Git tente de fusionner votre branche avec celle du dépôt distant (git tente d\u0026rsquo;auto-fusionner les changements).\nConflits Malheureusement, ça n\u0026rsquo;est pas toujours possible et résulte par des conflits. Vous devez alors régler ces conflits manuellement en éditant les fichiers indiqués par git.\nAprès l\u0026rsquo;avoir fait, vous devez :\n Les marquer comme fusionnés avec : git add nom-du-fichier Après avoir fusionné les changements, vous pouvez en avoir un aperçu en utilisant git diff branche-source branche-ciblee.  En remplaçant nom-du-fichier, branche-source et branche-ciblee par leurs valeurs respectives.\nLes versions (ou release) il est recommandé de créer des tags pour les versions de programmes. Vous pouvez créer un tag nommé 1.0.0 en exécutant les commandes :\n git log : pour obtenir l\u0026rsquo;identifiant du changement (commit) auquel vous soubaitez attribuer la version git tag 1.0.0 1b2e1d63ff : le 1b2e1d63ff désigne les 10 premiers caractères de l\u0026rsquo;identifiant du changement (commit) que vous voulez référencer avec ce tag  Vous pouvez utiliser moins de caractères de cet identifiant, il doit juste rester unique.\nRemplacer les changements locaux Dans le cas où vous auriez fait quelque chose de travers, vous pouvez annuler les changements locaux en utilisant cette commande :\n git checkout -- nom-du-fichier : cela remplacera les changements dans votre arbre de travail avec le dernier contenu du HEAD. Les changements déjà ajoutés à l\u0026rsquo;index, aussi bien les nouveaux fichiers, seront gardés  En remplaçant nom-du-fichier par le nom du fichier a remplacer.\nSi à la place vous voulez supprimer tous les changements et validations locaux, vous pouvez faire comme ceci :\n git fetch origin : récupére le dernier historique depuis le serveur git reset --hard origin/master  : pointe la branche principale locale dessus  "});index.add({'id':2,'href':'/docs/git/learn_github/','title':"Apprendre à utiliser Github",'content':"Apprendre à utiliser Github Auteur(s) : Erwan ROUSSEL (traductions et commentaires)\nTraduit de l\u0026rsquo;anglais depuis ce guide\nPrérequis : Apprendre à utiliser Git\nDans ce tutoriel vous allez apprendre à créer et utiliser un dépôt, créer et gérer une nouvelle branche, faire des changements, les valider et les envoyer sur Github, ouvrir et fusionner une demande de fusion à travers la création d\u0026rsquo;un projet \u0026ldquo;Hello World\u0026rdquo;.\nGithub c\u0026rsquo;est quoi ? Github est une plateforme d\u0026rsquo;hébergement de code pour le contrôle du versionnage et de la collaboration. Cela permet à vous et aux autres de travailler sur des projets de partout. (Pour faire simple, c\u0026rsquo;est là où vous partagez votre code afin de pouvoir travailler avec d\u0026rsquo;autres personnes où tout simplement pour que tout le monde y ait accès)\nAfin de suivre ce tutoriel il vous faudra un compte Github.com et un accès à internet.\nCréer un dépôt Un dépôt (\u0026ldquo;repository\u0026rdquo; en anglais) est la plupart du temps utilisé pour organiser un projet. Il peut contenir des dossiers, fichiers, images, vidéos, classeurs et groupes de données (\u0026ldquo;data sets\u0026rdquo; en anglais).\nVotre dépôt hello-world peut être un endroit où vous stockez vos idées, vos ressources ou même partager et discuter de celles-ci avec d\u0026rsquo;autres personnes\n Dans le coin en haut à droite, juste à côté de votre avatar, cliquez sur + puis sélectionnez New repository (qui signifie \u0026ldquo;Nouveau dépôt\u0026rdquo;). Nommez votre dépôt hello-world. Écrivez une courte description. Sélectionnez Initialize this repository with a README (qui signifie \u0026ldquo;Initialiser ce dépôt avec un LISEZ-MOI\u0026rdquo;).  Un fichier LISEZ-MOI ou README est un fichier à la base du dépôt qui sera visible sur la page du dépôt en dessous de la liste des fichiers sur Github, on y écrit souvent une courte description du projet ainsi que quelques lignes pour décrire son fonctionnement et son utilisation. Cliquez sur Create repository (qui signifie \u0026ldquo;Créer un dépôt\u0026rdquo;).  Créer une branche Le concept de branche est expliqué ici dans le tutoriel précédent.\nNous allons par la suite modifier le README.\n Rendez-vous sur votre dépôt hello-world. Cliquez sur le menu déroulant en haut de la liste de fichier sur lequel il est écrit branch: master (c\u0026rsquo;est la branche actuelle) Écrivez le nom de votre branche, readme-edits (qui signifie \u0026ldquo;modification du readme), dans le champ Find or create a new branch\u0026hellip; (qui signifie \u0026ldquo;Trouve ou crée une nouvelle branche). Sélectionnez la boîte bleue Create branch (qui signifie \u0026ldquo;Créer la branche\u0026rdquo;) ou appuyez sur la touche \u0026ldquo;Entrée\u0026rdquo; de votre clavier.   Maintenant vous avez deux branches, master et readme-edits. Elles ont l\u0026rsquo;air exactement pareilles, mais plus pour longtemps! Dans le prochain chapitre nous allons ajouter des changements à la nouvelle branche.\nFaire des changements et les valider Depuis le site de Github  Cliquez sur le fichier README.md Cliquez sur l\u0026rsquo;icône du crayon en haut à droite de l\u0026rsquo;affichage du fichier pour l\u0026rsquo;éditer. Dans l\u0026rsquo;éditeur, écrivez un peu à propos de vous. Écrivez un message de validation qui décrit le(s) changement(s) effectués. Cliquez sur le boutton Commit changes (qui signifie \u0026ldquo;Valider les changements\u0026rdquo;).   Ces changements seront appliqués seulement sur le fichier README de votre branche readme-edits, maintenant cette branche contient un contenu différent de la branche master.\nDepuis votre ordinateur  Clonez le dépôt comme expliqué ici (l\u0026rsquo;addresse est indiquée en haut à droite sur la page de votre dépôt).  Éditez le fichier README.md en y ajoutant des informations à propos de vous Ajoutez et validez les modifications comme expliqué ici. Puis envoyez les changements comme expliqué ici. Actualisez la page de votre dépôt, rendez vous sur la branche readme-edits, vous devriez voir les modifications uniquement sur cette branche.  Ouvrir une demande de fusion Maintenant que vous avez des changements sur une branche autre que la branche master vous pouvez maintenant ouvrir une demande de fusion (\u0026ldquo;Pull request\u0026rdquo; en anglais)\nUne pull-request ou demande de fusion désigne tout simplement l\u0026rsquo;action qui consiste à demander au détenteur du dépôt original de prendre en compte les modifications que vous avez apportées sur votre fork et que vous souhaitez partager. Cependant il peut s\u0026rsquo;agir de bien plus qu\u0026rsquo;une simple demande de prise en compte de vos modifications : il s\u0026rsquo;agit d\u0026rsquo;un forum dédié pour discuter de la fonctionnalité proposée. Si les changements posent problème, les membres de votre équipe peuvent entrer leurs commentaires dans la pull request et adapter la fonctionnalité en faisant un push de commits de suivi. Cette activité est directement suivie dans la pull request.\nVous pouvez utiliser le système de mention (le contenu du lien est en anglais) dans vos demandes de fusions afin de demander des retours de personnes ou équipes spécifiques qu\u0026rsquo;il soit dans la même salle que vous ou des milliers de kilomètres.\nVous pouvez même ouvrir une demande de fusion sur votre propre dépôt et la fusionner vous mpeme. C\u0026rsquo;est une bonne manière d\u0026rsquo;adopter le \u0026ldquo;Gtihub flow\u0026rdquo; avant de travailler sur de plus gros projets.\nVoici un tableau récapitulatif des étapes d\u0026rsquo;ouverture d\u0026rsquo;une demande de fusion (vous pouvez cliquer sur les images pour les agrandir) :\n   Étape Image     Cliquez sur l\u0026rsquo;onglet Pull Request, puis une fois sur la page, cliquez sur le bouton vert New pull request (qui signifie \u0026ldquo;Nouvelle demande de fusion\u0026rdquo;).    Dans le tableau Example Comparisons (qui signifie \u0026ldquo;Example de comparaisons\u0026rdquo;), sélectionnez la branche que vous avez créé : readme-edits, pour la comparer avec la branche originale : master.    Jetez un coup d\u0026rsquo;oeil au différence sur la page Compare pour être sûr que c\u0026rsquo;est ce que vous souhaitez envoyer.    Si vous êtes satisfait des changements que vous souhaitez envoyer, cliquez sur le gros boutons vert Create pull request (qui signifie \u0026ldquo;Créer une demande de fusion\u0026rdquo;).    Donnez un titre et une brève descripion de vos changements à votre demande de fusion.     Une fois que vous avez complété ces étapes, cliquez sur Create pull request !\n Astuce: vous pouvez utiliser des emoji ainsi que du glisser déposer d\u0026rsquo;image et de gifs (le contenu de ces liens est en anglais) dans les commentaires de demande de fusion.\n Fusionner votre demande Fusion se dit \u0026ldquo;merge\u0026rdquo; en anglais dans ce contexte\nDans cette étape finale, il est temps de réunir nos changements, autrement dit fusionner la branche readme-edits dans la branche master.\n Cliquez sur le bouton vert Merge pull request (qui signifie \u0026ldquo;Fusionner la demande de fusion\u0026rdquo;) pour fusionner les changements dans la branche master. Cliquez sur Confirm merge (qui signifie \u0026ldquo;Confirmer la fusion\u0026rdquo;).  Maintenant que les changements ont été fusionnés dans la branche master, la branche readme-edits n\u0026rsquo;est plus utile. Descendez alors et cliquez sur le bouton violet Delete branch (qui signifie \u0026ldquo;supprimer la branche\u0026rdquo;).  Rendez vous sur la page de votre dépôt, les modifications apparaissent sur la branche master.  "});index.add({'id':3,'href':'/docs/javascript/learn_nodejs/','title':"Apprendre à utiliser NodeJS",'content':"Apprendre à utiliser NodeJS Auteur(s) : Erwan ROUSSEL (traductions et commentaires)\nTraduit de l\u0026rsquo;anglais depuis ce guide\nPrérequis : Apprendre le Javascript, Les requêtes HTTP\nIntroduction Node.js est un environnement d\u0026rsquo;exécution open-source et cross-platform (qui peut être utilisé sur n\u0026rsquo;importe quel système d\u0026rsquo;exploitation) JavaScript. C\u0026rsquo;est un outil populaire pour à peu près tout les types de projets!\nNode.js utilise le moteur JavaScript V8, le coeur de Google Chrome, en dehors du navigateur. Cela permet à Node.js d\u0026rsquo;être très performant.\nUne application Node.js est lancée dans un seul processus (\u0026ldquo;process\u0026rdquo; en anglais), sans créer de nouveau fil d\u0026rsquo;éxécution (\u0026ldquo;thread\u0026rdquo; en anglais) pour chaque requête. Node.js apporte une collection d\u0026rsquo;I/O primitifs dans sa librairie standard qui évite au code JavaScript d\u0026rsquo;être bloquant. Les librairieNode.js sont généralement écrites de manière non-bloquante, faisant de la programmation bloquante une exception plutôt qu\u0026rsquo;une norme.\nQuand Node.js a besoin d\u0026rsquo;effectuer un opération I/O, comme lire depuis le réseau, accéder à une base de données ou à un système de fichier, au lieu de bloquer le fil d\u0026rsquo;éxécution, Node.js reprendra les opérations lorsque la réponse lui reviendra.\nCela permet à Node.js de gérer des centaines de connections en même temps sur un seul serveur sans avoir à introduire le fardeau de gérer les fils d\u0026rsquo;éxécution simultannés, qui peut être une source importante de bugs.\nNode.js a un avantage unique car des milions de développeurs frontend qui écrivent déjà du code JavaScript pour le navigateur peuvent maintenant écrire du code côté-serveur (\u0026ldquo;server-side\u0026rdquo; en anglais) en plus du code côté-client (\u0026ldquo;client-side\u0026rdquo; en anglais) sans avoir besoin d\u0026rsquo;apprendre un language complètement différent.\nEn utilisant Node.js, les nouveaux standards ECMAScript peuvent être utilisés sans problème car vous n\u0026rsquo;avez pas besoin d\u0026rsquo;attendre que tout vos utilisateurs mette à jour leurs navigateurs. Vous décidez alors quelle version de ECMAScript vous souhaitez utiliser en changeant de version de Node.js, et vous pouvez aussi activez des fonctionnalités expérimentales en lançant Node.js avec des drapeaux (\u0026ldquo;flags\u0026rdquo; en anglais).\nInstallation Rendez-vous sur la page de téléchargement.\nExample d\u0026rsquo;application Node.js const http = require(\u0026#39;http\u0026#39;) const hostname = \u0026#39;127.0.0.1\u0026#39; const port = process.env.PORT const server = http.createServer((req, res) =\u0026gt; { res.statusCode = 200 res.setHeader(\u0026#39;Content-Type\u0026#39;, \u0026#39;text/plain\u0026#39;) res.end(\u0026#39;Hello World!\\n\u0026#39;) }) server.listen(port, hostname, () =\u0026gt; { console.log(`Server running at http://${hostname}:${port}/`) }) Ce code inclut premièrement le module Node.js http.\nNode.js a un librairie standard fantastique, qui inclue un support \u0026ldquo;first-class\u0026rdquo; pour le réseau.\nLa méthode createServer() du module http crée un nouveau serveur HTTP et le retourne.\nLe serveur écoute alors sur le port et le nom d\u0026rsquo;hôte spécifié. Quand le serveur est prêt, la fonction passée en paramètre (\u0026ldquo;callback\u0026rdquo; en anglais) est alors exécutée, dans ce cas elle nous informe via la console que le serveur est lancé.\nDès lors qu\u0026rsquo;une requête est réçue, l\u0026rsquo;évènement request est appelé, apportant deux objets: la requête (un objet http.IncomingMessage) et une réponse (un objet http.ServerResponse).\nCes deux objets sont essentiels pour gérer une requête HTTP.\nLe premier apporte les détails de la requête. Dans cet example il n\u0026rsquo;est pas utilisé mais vous pouvez accéder au header de la requête et aux données de celle-ci.\nLe second est utilisé pour retourner des données à celui qui fait la requête.\nDans ce cas avec:\nres.statusCode = 200 On attribue la valeur 200 à la propriété statusCode pour indiquer une réponse réussie.\nres.setHeader(\u0026#39;Content-Type\u0026#39;, \u0026#39;text/plain\u0026#39;) On attribue la valeur text/plain à l\u0026rsquo;en-tête Content-Type à l\u0026rsquo;aide de la méthode setHeader afin de spécifier que nous renvoyons du texte.\nres.end(\u0026#39;Hello World\\n\u0026#39;) et on termine en fermant la réponse en ajoutant le contenu en argument à la fonction end.\nNode.Js vs Navigateur L\u0026rsquo;avantage d\u0026rsquo;utiliser Node.js Le navigateur et Node.js utilise tout les deux JavaScript comme language de programmation.\nConstruire des applications pour navigateurs et une chose complètement différente que de construire une application Node.js.\nEn dépit du fait qu\u0026rsquo;il s\u0026rsquo;agit toujours de JavaScript, il y a quelques différences clées qui rendent l\u0026rsquo;expérience radicalement différente.\nDu point de vu d\u0026rsquo;un développeur frontend qui utilise JavaScript quotidiennement. Les applications Node.js ont un grand avantage. Celui de pouvoir coder le frontend et le backend en un seul language.\nLes changements dans l\u0026rsquo;écosystème D\u0026rsquo;une part, dans le navigateur, la plupart du temps vous interagissez avec le DOM, ou les autres plateformes d\u0026rsquo;APIs Web comme les Cookies. Celles-ci n\u0026rsquo;existent pas en Node.js bien-sûr. Vous n\u0026rsquo;avez pas accès au objects document et window ainsi que les autres objets mis à disposition par le navigateur.\nD\u0026rsquo;autre part, dans le navigateur, vous n\u0026rsquo;avez pas accès à toutes les formidables APIs qu\u0026rsquo;apporte Node.js à travers ses modules, comme la fonctionnalité d\u0026rsquo;accès au fichier du système.\nPour finir, Node.js et le navigateur se complètent parfaitement, vous pouvez écrire votre code côté serveur avec Node.js et y accéder depuis le navigateur tout en utilisant seulement du Javascript.\nNPM npm (Pour \u0026ldquo;Node Package Manager\u0026rdquo;) est le gestionnaire de paquet (\u0026ldquo;package manager\u0026rdquo; en anglais) standard pour Node.js.\nEn janvier 2017, plus de 350 000 paquets ont été signalés comme étant inscrits dans le registre npm, ce qui en fait le plus gros dépot de code pour un seul language dans le mode et vous pouvez être sûr qu\u0026rsquo;il y a un paquet pour (à peu près!) tout.\n Yarn est une alternative à NPM, allez y jeter un coup d\u0026rsquo;oeil 😉\n Mais que faire avec NPM ?\nRechercher des paquets Rendez vous sur []le site de NPM](https://www.npmjs.com/) afin de rechercher des paquets.\nInstaller toutes vos dépendances Si un projet à un fichier package.json, en utilisant la commande :\nnpm install npm va installer toutes les dépendances listées dans ce fichier, dans le dossier node_modules en le créant si il n\u0026rsquo;existe pas déjà.\nInstaller un paquet Vous pouvez aussi installer un paquet spécifique en utilisant la commande :\nnpm install \u0026lt;nom-du-paquet\u0026gt; En remplaçant par le nom du paquet voulu.\nVous allez souvent voir plus de drapeaux ajoutés à cette commande :\n --save installe et ajoute le nom du paquet et sa version dans les dépendances du fichier package.json. --save-dev installe et ajoute le nom du paquet et sa version dans les dépendances de développement du fichier package.json.  La différence est principalement que les dépendances de développement (devDependencies) sont souvent des outils de développements comme une librairie pour faire des tests, alors que les dépendances (dependencies) sont souvent liées à l\u0026rsquo;application en production.\nMettre à jour les paquets Mettre à jour les paquets est tout aussi facile, en utilisant la commande :\nnpm update npm va checker tous les paquets et vérifier si il n\u0026rsquo;ya pas de nouvelle version qui satisfie vos contraintes de versions.\nVous pouvez aussi spécifier un paquet à mettre à jour:\nnpm update \u0026lt;nom-du-paquet\u0026gt; En remplaçant nom-du-paquet par le nom du paquet voulu.\nLancer des tâches Le fichier package.json supporte un format pour spécifier des tâches en ligne de commande qui peuvent être lancées en utilisant la commande :\nnpm run \u0026lt;nom-de-la-tâche\u0026gt; En remplaçant nom-de-la-tâche par le nom de la tâche spécifiée dans le fichier package.json.\nPar example :\n{ \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;node app.js\u0026#34; } } Lire et écrire des fichiers Lire un fichier La manière la plus simple de lire un fichier avec Node.js est d\u0026rsquo;utiliser la méthode fs.readFile(), en lui passant en paramètre le chemin du fichier et la fonction qui sera appelée avec les données du fichier (et l\u0026rsquo;erreur si il y en a une) :\n// Inclus le module \u0026#39;fs\u0026#39; afin de pouvoir l\u0026#39;utiliser en utilisant l\u0026#39;objet fs const fs = require(\u0026#39;fs\u0026#39;) // Lis le fichier de manière asynchrone et exécute la fonction à appeler avec les données et une erreur si il y en à une fs.readFile(\u0026#39;/Users/joe/test.txt\u0026#39;, (err, data) =\u0026gt; { // Traitement de l\u0026#39;erreur si il y en à une  if (err) { console.error(err) return } // Affiche le contenu du fichier dans la console  console.log(data) }) Écrire dans un fichier La manière la plus sumple d\u0026rsquo;écrire des fichiers avec Node.js est d\u0026rsquo;utiliser l\u0026rsquo;API fs.writeFile() en lui passant en paramètre le chemin du fichier et le contenu à insérer dedans :\n// Inclus le module \u0026#39;fs\u0026#39; afin de pouvoir l\u0026#39;utiliser en utilisant l\u0026#39;objet fs const fs = require(\u0026#39;fs\u0026#39;) const content = \u0026#39;Un peu de contenu !\u0026#39; fs.writeFile(\u0026#39;/Users/joe/test.txt\u0026#39;, content, err =\u0026gt; { // Traitement de l\u0026#39;erreur si il y en à une  if (err) { console.error(err) return } // Le contenu à été inséré sans erreur dans le fichier }) Si vous souhaitez insérer le contenu à la fin du fichier, vous pouvez utiliser la méthode fs.appendFile() en lui passanten paramètre le chemin du fichier et le contenu à insérer dedans :\nconst content = \u0026#39;Un peu de contenu !\u0026#39; fs.appendFile(\u0026#39;file.log\u0026#39;, content, err =\u0026gt; { // Traitement de l\u0026#39;erreur si il y en à une \tif (err) { console.log(err) return } // Le contenu à été inséré sans erreur dans le fichier }) Accéder à une variable d\u0026rsquo;environnement Le module process de Node.js apporte un propriété env qui héberge toutes les variables d\u0026rsquo;environnement qui étaient assignées au moment ou le processus a été lançé (lorsque vous avez exécuté la comande node \u0026lt;fichier\u0026gt;).\nVoilà un example qui accède à la variable d\u0026rsquo;environnement NODE_ENV, qui est assignée à development par défaut\n process n\u0026rsquo;a pas besoin d\u0026rsquo;un require, il est automatiquement disponible.\n proccess.env.NODE_ENV // \u0026#34;development\u0026#34; "});index.add({'id':4,'href':'/docs/serveur/introduction/','title':"Apprendre à utiliser NodeJS",'content':"Introduction Auteur(s): Erwan ROUSSEL\nQu\u0026rsquo;est ce qu\u0026rsquo;un serveur ?  Un serveur informatique est un dispositif informatique (matériel et logiciel) qui offre des services à un ou plusieurs clients (parfois des milliers).\n Les services les plus courants sont :\n l\u0026rsquo;accès aux informations du World Wide Web (en hébergeant un site web); le courrier électronique (en hébergeant un serveur mail); le partage de périphériques (imprimantes, disque durs, etc.) ; le commerce électronique ; le stockage en base de données ; la gestion de l\u0026rsquo;authentification et du contrôle d\u0026rsquo;accès ; le jeu et la mise à disposition de logiciels applicatifs.  Source: Wikipedia\nPour résumer son fonctionnement, un client appelle un serveur à l\u0026rsquo;aide d\u0026rsquo;un protocole réseau adapté au service qu\u0026rsquo;il souhaite utiliser et le serveur se charge de le diriger vers le bon service sur celui-ci.\nComment installer un serveur web ? Peut-être avez-vous développé un site internet que vous souhaiteriez héberger vous même 🤷. Dans ce cas il va vous falloir installer votre propre serveur.\nN\u0026rsquo;importe quel vieil ordinateur qui ne vous sert plus peut suffir pour un (très) faible traffic. Vous pouvez aussi acquérir un Raspberry pi pour seulement 35$ (il s\u0026rsquo;agit d\u0026rsquo;un \u0026ldquo;mini-ordinateur\u0026rdquo;) ou bien acheter un vrai serveur si vous en ressentez le besoin. Cet ordinateur devra être allumé en permanence afin de pouvoir rendre votre site web accessible à qui le souhaite à tout heure de la journée (et de la nuit).\nPour les besoins des guides suivants nous allons installer notre serveur sur une machine virtuelle puisque nous ne faisons qu\u0026rsquo;apprendre et nous n\u0026rsquo;avons pas besoin de rendre notre site acessible h24 7/7j. Vous pourrez alors utiliser votre ordinateur afin d\u0026rsquo;apprendre à installer et utiliser un serveur.\nLinux Il est possible d\u0026rsquo;installer un serveur windows mais le système d\u0026rsquo;exploitation le plus largement utilisé sur des serveurs est: Linux et toutes ses distributions. Nous allons utiliser la distribution Debian, simple, efficace, dôtée d\u0026rsquo;une bonne communauté, si vous avez des difficultés à installer ou à utiliser debian vous aurez forcément quelqu\u0026rsquo;un qui a déjà eu le même problème que vous sur internet et donc la solution à votre problème.\nPour installer Debian sur une machine virtuelle vous pouvez suivre ce lien.\nQu\u0026rsquo;allons nous faire par la suite ?  Installer un serveur web Configurer votre serveur web pour PHP Configurer votre serveur web pour NodeJS Sécuriser votre serveur Utiliser docker et docker-compose  "});index.add({'id':5,'href':'/docs/serveur/webserver_configure_serverless/','title':"Configurer un serveur web pour NodeJS",'content':"Configurer un serveur web pour NodeJS Un peu de patience ce tutoriel est en cours de rédaction.\n"});index.add({'id':6,'href':'/docs/serveur/webserver_configure_php/','title':"Configurer un serveur web pour PHP",'content':"Configurer un serveur web pour PHP Un peu de patience ce tutoriel est en cours de rédaction.\n"});index.add({'id':7,'href':'/docs/','title':"Docs",'content':""});index.add({'id':8,'href':'/docs/serveur/webserver_install/','title':"Installer un serveur web",'content':"Installer un serveur web Un peu de patience ce tutoriel est en cours de rédaction.\n"});index.add({'id':9,'href':'/docs/javascript/practice_nodejs/','title':"Mise en pratique de Node.js",'content':"Mise en pratique de Node.js Auteur(s) : Erwan ROUSSEL\nPrérequis: Apprendre à utiliser NodeJS\nIntroduction Dans ce mini-tutoriel vous allez réaliser une petite API avec Node.Js et les librairies ExpressJs. À partir d\u0026rsquo;un fichier JSON répertoriant des fleurs, nous allons retourner la liste et les détails de celles-ci.\nNous allons utiliser un fichier JSON pour simuler une base de donnée mais il est plus fréquent d\u0026rsquo;utiliser une base de donnée surtout dès lors qu\u0026rsquo;il y a des données sensibles à stocker (comme des mots de passe ou des informations sur l\u0026rsquo;utilisateur).\nInstallation des dépendances Nous allons tout d\u0026rsquo;abbord initialiser le projet :\n Créer un dossier, puis s\u0026rsquo;y rendre avec un terminal Utilisez la commande npm init et validez les champs par défaut  Un fichier package.json est alors créé à la racine du projet.\nNous allons installer ExpressJs un framework web minimalist (un outil pour vous aider à créer des applications web plus rapidement). ExpressJs n\u0026rsquo;est pas le seul framework disponible pour NodeJS, voici une liste non-exhaustive de ceux-ci (liste plus complète ici le contenu du lien est en anglais):\n AdonisJs: Un framework complet hautement orienté sur la stabilité et l\u0026rsquo;ergonomie du développeur. Adonis est l\u0026rsquo;un des frameworks Node.js les plus rapide. Fastify: Un frameworks web qui a pour but de donner au développeur la meilleure expérience possible avec moins de prise de tête et un puissant système de plugin. Il est aussi l\u0026rsquo;un des plus rapide. hapi: Un framework riche pour construire des applications et des services qui permette au développeur de se concentrer sur l\u0026rsquo;écriture d\u0026rsquo;une logique réutilisable au lieu de perdre du temps à construire l\u0026rsquo;infrastructure. Socket.io: Un moteur de communication en temps réel pour construire des applications réseaux.  Comme vu dans le guide précédent, il suffit de lancer cette commande afin d\u0026rsquo;installer ExpressJs :\nnpm install express --save Le drapeau --save indique à npm d\u0026rsquo;ajouter express à la liste de dépendances du fichier package.json, ainsi si vous reprenez le projet sur un autre ordinateur vous n\u0026rsquo;aurez qu\u0026rsquo;à faire npm install afin d\u0026rsquo;installer toutes les dépendances listées dans le package.json.\nNous allons aussi télécharger le fichier JSON répertoriant les fleurs ici.\nCréation de l\u0026rsquo;application express Nous allons maintenant commencer à coder.\n Créez un fichier .js (nous allons créer index.js mais vous pouvez très bien l\u0026rsquo;appeler app.js ou bien server.js ou bien comme vous souhaitez le nommer).  // On importe la librairie express précédament installée const express = require(\u0026#39;express\u0026#39;) // On initialise notre application express const app = express() // On définit le port sur lequel notre application va se lancer const port = 3000 // On crée notre première route (plus de détails sur cette partie juste en dessous) app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.send(\u0026#39;Hello World!\u0026#39;)) // On lance le serveur avec le port défini app.listen(port, () =\u0026gt; console.log(`Le serveur écoute sur le port ${port}`)) La méthode get prend deux paramètres, le chemin de la route (ici /, c\u0026rsquo;est à dire http://localhost:3000/\u0026rsquo;) et la fonction a appeler avec les données de la requête (ici elle renvoie juste Hello World!).\nSi vous vous rendez sur votre navigateur à l\u0026rsquo;addresse http://localhost:3000/ vous devriez apercevoir Hello World!.\nCréation de l\u0026rsquo;API Nous allons avoir seulement deux routes pour cette API (nous ne ferons pas de modifications donc nous ne traiterons pas de requête POST ou PUT)\n GET /flowers : liste toutes les fleurs GET /flowers/:id : affiche les détails d\u0026rsquo;une fleur  Liste des fleurs // On importe le module fs au début du fichier const fs = require(\u0026#39;fs\u0026#39;) // ...  // On déclare la route app.get(\u0026#39;/flowers\u0026#39;, (req, res, next) =\u0026gt; { // On lit le fichier \tfs.readFile(\u0026#39;flowers.json\u0026#39;, (err, data) =\u0026gt; { if(err) { next(err) } else { // On envoie le contenu du fichier en précisant qu\u0026#39;il s\u0026#39;agit de JSON \tres.json(data)\t} }) }) On remarque qu\u0026rsquo;on a un paramètre en plus à notre callback, le paramètre next il permet ici à express de gérer les erreurs à notre place.\nres.json(data) quant à lui modifie le Header appelé Content-Type pour préciser qu\u0026rsquo;il s\u0026rsquo;agit de JSON puis envoie la réponse avec le contenu du fichier.\nVous pouvez maintenant vous rendre à cette addresse http://localhost:3000/flowers vous devriez voir la liste des fleurs\nAfficher le détail d\u0026rsquo;une fleur app.get(\u0026#39;/flower/:id\u0026#39;, (req, res, next) =\u0026gt; { // On récupère le paramètre de l\u0026#39;URL \tconst id = req.params.id // On lit le fichier \tfs.readFile(\u0026#39;flowers.json\u0026#39;, (err, data) =\u0026gt; { if(err) { next(err) } else { // On récupère l\u0026#39;objet de la fleur dans le json  const flower = JSON.parse(data[id]) // On renvoit l\u0026#39;objet sous format json  res.json(JSON.stringify(flower)) } })\t}) On a ici appris à récupèrer les paramètres d\u0026rsquo;une URL à l\u0026rsquo;aide de la propriété req.params.\nPour approfondir Après cette petite découverte je vous invite à aller regarder la documentation d\u0026rsquo;ExpressJS le contenu de ce lien est en anglais ainsi que celle des autres frameworks que j\u0026rsquo;ai mis au dessus.\nVous pouvez aussi jeter un coup d\u0026rsquo;oeil à ce guide qui est plus complet puisqu\u0026rsquo;il aborde aussi la récupération des données envoyées par la méthode POST.\n"});index.add({'id':10,'href':'/docs/serveur/webserver_secure/','title':"Sécuriser un serveur",'content':"Sécuriser un serveur Un peu de patience ce tutoriel est en cours de rédaction.\n"});})();