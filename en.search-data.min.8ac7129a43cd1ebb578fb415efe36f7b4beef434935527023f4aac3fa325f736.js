'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/git/learn_git/','title':"Apprendre à utiliser Git",'content':"Apprendre à utiliser Git Auteur(s) : Erwan ROUSSEL\nInspiré de ce tutoriel\nInstallation  Télécharger git pour Mac OS Télécharger git pour Windows Télécharger git pour Linux  Configuration Ceci vous sera demandé lorsque vous allez essayer d\u0026rsquo;envoyer vos modifications\nIl est requis d\u0026rsquo;avoir configuré son nom d\u0026rsquo;utilisateur et son addresse email en exécutant ces commandes :\n git config --global user.name \u0026quot;John Doe\u0026quot; : configure le nom d\u0026rsquo;utilisateur en tant que John Doe git config --global user.email johndoe@example.com : configure l\u0026rsquo;addresse email en tant que johndoe@example.com  Créer un nouveau dépôt Un dépôt (\u0026ldquo;repository\u0026rdquo; en anglais) Git est un entrepôt virtuel de votre projet. Il vous permet d\u0026rsquo;enregistrer votre code et ses versions ainsi que d\u0026rsquo;y accéder au besoin. Source\nPour initialiser un dépot Git :\n Créez un nouveau dossier, ouvrez le Exécutez la commande git init  Un dossier .git devrait apparaître dans celui-ci, ceci signifie que le dépôt a bien été initialisé (c’est un dossier caché situé à la racine du projet). Il contient l’historique des modifications des fichiers et la configuration de Git pour ce projet). Source\nCloner un dépôt Si votre dépôt se situe déjà sur un serveur distant (comme Github, Gitlab, Bitbucket ou autre), il vous faudra le \u0026ldquo;cloner\u0026rdquo; (le télécharger) afin d\u0026rsquo;y accéder sur votre ordinateur.\nIl y a deux méthodes pour faire ceci:\n  Par défaut, en utilisant HTTP : git clone https://nom-du-serveur.com/nom-d-utilisateur/nom-du-depot\n  Autrement (si ssh est configuré) : git clone git@serveur:/nom-d-utilisateur/nom-du-depot\n  Arbres Un arbre (tree) Git est une forme de répertoire. Il va référencer une liste de trees et de blobs (sous-répertoires et fichiers) Source\nVotre dépôt local est composé de trois \u0026ldquo;arbres\u0026rdquo; gérés par git.\n Le premier est votre espace de travail qui contient réellement vos fichiers. Le second est un Index qui joue un rôle d\u0026rsquo;espace de transit pour vos fichiers Et enfin HEAD qui pointe vers la dernière validation que vous ayez faite.  Ajouter et valider Vous pouvez proposer un changement (ajouter des fichiers à l\u0026rsquo;Index) en exécutant les commandes suivantes :\n git add nom-du-fichier ou git add * : c\u0026rsquo;est la première étape dans un workflow git basique. git commit -m \u0026quot;Message de validation\u0026quot; : valide ces changement.  En remplaçant nom-du-fichier par le nom du fichier a ajouter.\nLe fichier est donc ajouté au HEAD, mais pas encore dans votre dépôt distant.\nLes branches Les branches sont utilisées pour développer des fonctionnalités isolées des autres. La branche master est la branche par défaut quand vous créez un dépôt. Utilisez les autres branches pour le développement et fusionnez ensuite à la branche principale quand vous avez fini. Source\nFeature (en anglais) signifie fonctionnalité\nLes commandes suivantes vous permettent de manipuler les branches :\n Créer une nouvelle branche nommée \u0026ldquo;feature_x\u0026rdquo; et passer dessus pour l\u0026rsquo;utiliser : git checkout -b feature_x Retourner sur la branche principale : git checkout master Supprimer la branche : git branch -d feature_x  À savoir : une branche n\u0026rsquo;est pas disponible pour les autres tant que vous ne l\u0026rsquo;aurez pas envoyée vers votre dépôt distant\n Pour l\u0026rsquo;envoyer vers votre dépôt distant : git push origin \u0026lt;branch\u0026gt;  Fusion Pour fusionner les changements entre deux branches il existe la commande :\n git merge branche : qui va fusionner la branche indiquée avec la branche active (par exemple master)  En remplaçant branche par la branche que vous souhaitez fusionner avec la branche active\nEnvoyer des changements Vos changements sont maintenant dans le HEAD de la copie de votre dépôt local. Pour les envoyer à votre dépôt distant :\n Exécutez la commande git push origin master  En remplaçant master par la branche dans laquelle vous souhaitez envoyer vos changements.\nSi vous n\u0026rsquo;avez pas cloné votre dépôt existant et voulez le connecter à votre dépôt sur un serveur distant (après l\u0026rsquo;avoir créé au préalable) :\n Ajoutez le avec : git remote add origin addresse-du-depot  En remplaçant addresse du dépôt par l\u0026rsquo;addresse de votre dépôt\nMaintenant, vous pouvez envoyer vos changements vers le serveur distant sélectionné en éxécutant la commande précédante\nMettre à jour pour mettre à jour votre dépôt local vers les dernières validations, exécutez la commande git pull dans votre espace de travail pour récupérer et fusionner les changements distants. Lors de la mise à jour, Git tente de fusionner votre branche avec celle du dépôt distant (git tente d\u0026rsquo;auto-fusionner les changements).\nConflits Malheureusement, ça n\u0026rsquo;est pas toujours possible et résulte par des conflits. Vous devez alors régler ces conflits manuellement en éditant les fichiers indiqués par git.\nAprès l\u0026rsquo;avoir fait, vous devez :\n Les marquer comme fusionnés avec : git add nom-du-fichier Après avoir fusionné les changements, vous pouvez en avoir un aperçu en utilisant git diff branche-source branche-ciblee.  En remplaçant nom-du-fichier, branche-source et branche-ciblee par leurs valeurs respectives.\nLes versions (ou release) il est recommandé de créer des tags pour les versions de programmes. Vous pouvez créer un tag nommé 1.0.0 en exécutant les commandes :\n git log : pour obtenir l\u0026rsquo;identifiant du changement (commit) auquel vous soubaitez attribuer la version git tag 1.0.0 1b2e1d63ff : le 1b2e1d63ff désigne les 10 premiers caractères de l\u0026rsquo;identifiant du changement (commit) que vous voulez référencer avec ce tag  Vous pouvez utiliser moins de caractères de cet identifiant, il doit juste rester unique.\nRemplacer les changements locaux Dans le cas où vous auriez fait quelque chose de travers, vous pouvez annuler les changements locaux en utilisant cette commande :\n git checkout -- nom-du-fichier : cela remplacera les changements dans votre arbre de travail avec le dernier contenu du HEAD. Les changements déjà ajoutés à l\u0026rsquo;index, aussi bien les nouveaux fichiers, seront gardés  En remplaçant nom-du-fichier par le nom du fichier a remplacer.\nSi à la place vous voulez supprimer tous les changements et validations locaux, vous pouvez faire comme ceci :\n git fetch origin : récupére le dernier historique depuis le serveur git reset --hard origin/master  : pointe la branche principale locale dessus  "});index.add({'id':1,'href':'/docs/git/learn_github/','title':"Apprendre à utiliser Github",'content':"Apprendre à utiliser Github Auteur(s) : Erwan ROUSSEL (traductions et commentaires)\nTraduit de l\u0026rsquo;anglais depuis ce guide\nPrérequis : Apprendre à utiliser Git\nDans ce tutoriel vous allez apprendre à créer et utiliser un dépôt, créer et gérer une nouvelle branche, faire des changements, les valider et les envoyer sur Github, ouvrir et fusionner une demande de fusion à travers la création d\u0026rsquo;un projet \u0026ldquo;Hello World\u0026rdquo;.\nGithub c\u0026rsquo;est quoi ? Github est une plateforme d\u0026rsquo;hébergement de code pour le contrôle du versionnage et de la collaboration. Cela permet à vous et aux autres de travailler sur des projets de partout. (Pour faire simple, c\u0026rsquo;est là où vous partagez votre code afin de pouvoir travailler avec d\u0026rsquo;autres personnes où tout simplement pour que tout le monde y ait accès)\nAfin de suivre ce tutoriel il vous faudra un compte Github.com et un accès à internet.\nCréer un dépôt Un dépôt (\u0026ldquo;repository\u0026rdquo; en anglais) est la plupart du temps utilisé pour organiser un projet. Il peut contenir des dossiers, fichiers, images, vidéos, classeurs et groupes de données (\u0026ldquo;data sets\u0026rdquo; en anglais).\nVotre dépôt hello-world peut être un endroit où vous stockez vos idées, vos ressources ou même partager et discuter de celles-ci avec d\u0026rsquo;autres personnes\n Dans le coin en haut à droite, juste à côté de votre avatar, cliquez sur + puis sélectionnez New repository (qui signifie \u0026ldquo;Nouveau dépôt\u0026rdquo;). Nommez votre dépôt hello-world. Écrivez une courte description. Sélectionnez Initialize this repository with a README (qui signifie \u0026ldquo;Initialiser ce dépôt avec un LISEZ-MOI\u0026rdquo;).  Un fichier LISEZ-MOI ou README est un fichier à la base du dépôt qui sera visible sur la page du dépôt en dessous de la liste des fichiers sur Github, on y écrit souvent une courte description du projet ainsi que quelques lignes pour décrire son fonctionnement et son utilisation. Cliquez sur Create repository (qui signifie \u0026ldquo;Créer un dépôt\u0026rdquo;).  Créer une branche Le concept de branche est expliqué ici dans le tutoriel précédent.\nNous allons par la suite modifier le README.\n Rendez-vous sur votre dépôt hello-world. Cliquez sur le menu déroulant en haut de la liste de fichier sur lequel il est écrit branch: master (c\u0026rsquo;est la branche actuelle) Écrivez le nom de votre branche, readme-edits (qui signifie \u0026ldquo;modification du readme), dans le champ Find or create a new branch\u0026hellip; (qui signifie \u0026ldquo;Trouve ou crée une nouvelle branche). Sélectionnez la boîte bleue Create branch (qui signifie \u0026ldquo;Créer la branche\u0026rdquo;) ou appuyez sur la touche \u0026ldquo;Entrée\u0026rdquo; de votre clavier.   Maintenant vous avez deux branches, master et readme-edits. Elles ont l\u0026rsquo;air exactement pareilles, mais plus pour longtemps! Dans le prochain chapitre nous allons ajouter des changements à la nouvelle branche.\nFaire des changements et les valider Depuis le site de Github  Cliquez sur le fichier README.md Cliquez sur l\u0026rsquo;icône du crayon en haut à droite de l\u0026rsquo;affichage du fichier pour l\u0026rsquo;éditer. Dans l\u0026rsquo;éditeur, écrivez un peu à propos de vous. Écrivez un message de validation qui décrit le(s) changement(s) effectués. Cliquez sur le boutton Commit changes (qui signifie \u0026ldquo;Valider les changements\u0026rdquo;).   Ces changements seront appliqués seulement sur le fichier README de votre branche readme-edits, maintenant cette branche contient un contenu différent de la branche master.\nDepuis votre ordinateur  Clonez le dépôt comme expliqué ici (l\u0026rsquo;addresse est indiquée en haut à droite sur la page de votre dépôt).  Éditez le fichier README.md en y ajoutant des informations à propos de vous Ajoutez et validez les modifications comme expliqué ici. Puis envoyez les changements comme expliqué ici. Actualisez la page de votre dépôt, rendez vous sur la branche readme-edits, vous devriez voir les modifications uniquement sur cette branche.  Ouvrir une demande de fusion Maintenant que vous avez des changements sur une branche autre que la branche master vous pouvez maintenant ouvrir une demande de fusion (\u0026ldquo;Pull request\u0026rdquo; en anglais)\nUne pull-request ou demande de fusion désigne tout simplement l\u0026rsquo;action qui consiste à demander au détenteur du dépôt original de prendre en compte les modifications que vous avez apportées sur votre fork et que vous souhaitez partager. Cependant il peut s\u0026rsquo;agir de bien plus qu\u0026rsquo;une simple demande de prise en compte de vos modifications : il s\u0026rsquo;agit d\u0026rsquo;un forum dédié pour discuter de la fonctionnalité proposée. Si les changements posent problème, les membres de votre équipe peuvent entrer leurs commentaires dans la pull request et adapter la fonctionnalité en faisant un push de commits de suivi. Cette activité est directement suivie dans la pull request.\nVous pouvez utiliser le système de mention (le contenu du lien est en anglais) dans vos demandes de fusions afin de demander des retours de personnes ou équipes spécifiques qu\u0026rsquo;il soit dans la même salle que vous ou des milliers de kilomètres.\nVous pouvez même ouvrir une demande de fusion sur votre propre dépôt et la fusionner vous mpeme. C\u0026rsquo;est une bonne manière d\u0026rsquo;adopter le \u0026ldquo;Gtihub flow\u0026rdquo; avant de travailler sur de plus gros projets.\nVoici un tableau récapitulatif des étapes d\u0026rsquo;ouverture d\u0026rsquo;une demande de fusion (vous pouvez cliquer sur les images pour les agrandir) :\n   Étape Image     Cliquez sur l\u0026rsquo;onglet Pull Request, puis une fois sur la page, cliquez sur le bouton vert New pull request (qui signifie \u0026ldquo;Nouvelle demande de fusion\u0026rdquo;).    Dans le tableau Example Comparisons (qui signifie \u0026ldquo;Example de comparaisons\u0026rdquo;), sélectionnez la branche que vous avez créé : readme-edits, pour la comparer avec la branche originale : master.    Jetez un coup d\u0026rsquo;oeil au différence sur la page Compare pour être sûr que c\u0026rsquo;est ce que vous souhaitez envoyer.    Si vous êtes satisfait des changements que vous souhaitez envoyer, cliquez sur le gros boutons vert Create pull request (qui signifie \u0026ldquo;Créer une demande de fusion\u0026rdquo;).    Donnez un titre et une brève descripion de vos changements à votre demande de fusion.     Une fois que vous avez complété ces étapes, cliquez sur Create pull request !\n Astuce: vous pouvez utiliser des emoji ainsi que du glisser déposer d\u0026rsquo;image et de gifs (le contenu de ces liens est en anglais) dans les commentaires de demande de fusion.\n Fusionner votre demande Fusion se dit \u0026ldquo;merge\u0026rdquo; en anglais dans ce contexte\nDans cette étape finale, il est temps de réunir nos changements, autrement dit fusionner la branche readme-edits dans la branche master.\n Cliquez sur le bouton vert Merge pull request (qui signifie \u0026ldquo;Fusionner la demande de fusion\u0026rdquo;) pour fusionner les changements dans la branche master. Cliquez sur Confirm merge (qui signifie \u0026ldquo;Confirmer la fusion\u0026rdquo;).  Maintenant que les changements ont été fusionnés dans la branche master, la branche readme-edits n\u0026rsquo;est plus utile. Descendez alors et cliquez sur le bouton violet Delete branch (qui signifie \u0026ldquo;supprimer la branche\u0026rdquo;).  Rendez vous sur la page de votre dépôt, les modifications apparaissent sur la branche master.  "});index.add({'id':2,'href':'/docs/','title':"Docs",'content':""});})();